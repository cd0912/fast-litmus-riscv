RISCV "Risc V partial order model"

(*****************************************)
(* The RISCV Instruction set manual v2.3 *)
(*****************************************)

(***************)
(* Definitions *)
(***************)

(* Define ppo *)
include "riscv-ppo.cat"

(* co observations in test *)
let invrf = rf^-1

let obsco =
  let ww = po-loc & (W * W)
  and rw = rf ; (po-loc & (R * W))
  and wr = ((po-loc & (W * R)) ; invrf) \ id
  and rr = (rf ; (po-loc & (R * R)) ; invrf) \ id in
  (ww|rw|wr|rr)

(* The following applies to C only, where RMW is both R and W *)
let rmwco =
  let _RMW = R & W in
  rf & (W * _RMW) (* co observation by atomicity *)

let cobase = obsco|rmwco|co0

(* Catch uniproc violations early *)
acyclic cobase as ConsCo

(* Compute linearisations per locations *)
let co_locs (pco,wss) =
  let rec do_locs wss = match wss with
  || {} -> {}
  || ws ++ wss ->
      linearisations(ws,pco) ++ do_locs(wss)
  end in do_locs(wss)

(* Cross product linearisations *)
let cross =
  let rec do_cross (k,ys,oss) = match oss with
  || {} -> ys ++ k
  || os ++ oss ->
       let rec call_rec (k,os) = match os with
       || {} -> k
       || o ++ os ->
           call_rec (do_cross (k,o | ys,oss),os)
       end in
       call_rec (k,os)
  end in
  fun oss -> do_cross ({},0,oss)

(* Generate co's that extend partial order pco *)
let generate_orders(s,pco) = cross (co_locs (pco,partition s))
let generate_cos(pco) = generate_orders(W,pco)

with co from generate_cos(cobase)
(* From now, co is a coherence order *)
let coi = co & int
let coe = co \ coi

(* Compute fr *)
let fr = (invrf ; co) \ id
let fri = fr & int
let fre = fr \ fri

show co,fr


(**********)
(* Axioms *)
(**********)

(* Sc per location *)
acyclic co|rf|fr|po-loc as Coherence

(* Main model axiom *)
acyclic co|rfe|fr|ppo as Model

(* Atomicity axiom *)
empty rmw & (fre;coe) as Atomic
